Expression examples:

green-triangle :: Number -> Image
fun green-triangle(size):
  triangle(size, "solid", "green")
end
examples:
  green-triangle(50) is triangle(50, "solid", "green")
  green-triangle(30) is triangle(30, "solid", "green")
end


move-player-x :: Number, Key -> Number
fun move-player-x(x, key):
  ask:
    | is-key-equal(key, "right") then: add(x, 5)
    | is-key-equal(key, "left") then: sub(x, 5)
    | otherwise: x
  end
end
examples:
  move-player-x(5, "left") is 0
  move-player-x(5, "right") is 10
  move-player-x(5, "down") is 5
end



image-from-web = image-url("http://www.bootstrapworld.org/images/icon.gif")
another-web-image = image-url("https://github.com/brownplt/pyret-lang/blob/master/img/pyret-logo.png?raw=true")
x = div(image-width(another-web-image), 1.85)
y = div(image-height(another-web-image), 1.9)
combined = put-image(scale(0.5, image-from-web), x, y, another-web-image)



These are builtins:

torepr(arg)

  Convert arg to a string that looks like the constructor used to create it.
  So lists print like lists, strings print with surrounding quotes, etc.

  To stringify complex built-in values like images, it doesn't produce much
  useful; mainly this is for our own debugging.


raise(any-value)

  Use this to signal an error yourself


is-nothing
is-number
is-string
is-boolean
is-object
is-function

  These are predicates for the different kinds of Pyret values that are
  built-in (is-image/is-color are below, as well)

random(n :: Number) -> Number

  Produce a random integer in [0, n)

add(n1 :: Number, n2 :: Number) -> Number
sub(n1 :: Number, n2 :: Number) -> Number
div(n1 :: Number, n2 :: Number) -> Number
mul(n1 :: Number, n2 :: Number) -> Number
less(n1 :: Number, n2 :: Number) -> Number
greater(n1 :: Number, n2 :: Number) -> Number
greaterequal(n1 :: Number, n2 :: Number) -> Number
lessequal(n1 :: Number, n2 :: Number) -> Number
max(n1 :: Number, n2 :: Number) -> Number
min(n1 :: Number, n2 :: Number) -> Number

Basic math operations, with new names we picked recently




The rest of these are built-in convenience functions.  We can remove the num-
and string- prefixes for Bootstrap, if necessary and if we'll only be working
over strings and numbers.  For full Pyret, they stay this way because contains
could be useful for a number of uses.

string-contains
string-append
string-length
string-tonumber
string-repeat
string-substring
string-replace
string-split
string-char-at
string-toupper
string-tolower
string-explode
string-index-of
num-max
num-min
num-equals
num-abs
num-sin
num-cos
num-tan
num-asin
num-acos
num-atan
num-modulo
num-truncate
num-sqrt
num-ceiling
num-floor
num-log

num-exp(n :: Number) -> Number

  e^n

num-expt(n1 :: Number, n2 :: Number) -> Number

  n1^n2

num-exact
num-is-integer
num-tostring



----





All of these functions are just Pyret versions of existing WeScheme stuff; they
should have the same signature as before (number and placement of arguments).
Some names changed, because Pyret doesn't allow ? in names, so the convention
is to prefix with "is-"

is-image-color
is-mode
is-x-place
is-y-place
is-angle
is-side-count
is-step-count
is-image
bitmap-url
open-image-url
image-url
image-equals
text
normal
text-font
overlay
middle
overlay-xy
overlay-align
underlay
middle
underlay-xy
underlay-align
beside-align
beside
above
middle
above-align
empty-scene
put-image
place-image
place-image-align
rotate
scale
scale-xy
flip-horizontal
flip-vertical
frame
crop
line
add-line
scene-line

circle
square
rectangle
regular-polygon
ellipse
triangle
triangle-sas
triangle-sss
triangle-ass
triangle-ssa
triangle-aas
triangle-asa
triangle-saa
right-triangle
isosceles-triangle
star
star-sized
radial-star
star-polygon
rhombus
image-to-color-list
color-list-to-image
color-list-to-bitmap
image-width
image-height
image-baseline
name-to-color


World:

big-bang
on-tick
on-tick-n
to-draw
on-mouse
on-key
stop-when
is-key-equal




Example:

fun ticker(v): add(v, 1) end
fun drawer(v): circle(v, "solid", "red") end
fun keyer(v, k):
  ask:
    | is-key-equal(k, "down") then: sub(v, 5)
    | otherwise: v
  end
end
fun stopper(v): greater(v, 100) end

big-bang(1, [
    on-tick(ticker),
    to-draw(drawer),
    on-key(keyer),
    stop-when(stopper)
  ])
